## Makefile.in for slapd
# $ReOpenLDAP$
## Copyright (c) 2015,2016 Leonid Yuriev <leo@yuriev.ru>.
## Copyright (c) 2015,2016 Peter-Service R&D LLC <http://billing.ru/>.
##
## This file is part of ReOpenLDAP.
##
## ReOpenLDAP is free software; you can redistribute it and/or modify it under
## the terms of the GNU Affero General Public License as published by
## the Free Software Foundation; either version 3 of the License, or
## (at your option) any later version.
##
## ReOpenLDAP is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU Affero General Public License for more details.
##
## You should have received a copy of the GNU Affero General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.
##
## ---
##
## Copyright 1998-2014 The OpenLDAP Foundation.
## All rights reserved.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted only as authorized by the OpenLDAP
## Public License.
##
## A copy of this license is available in the file LICENSE in the
## top-level directory of the distribution or, alternatively, at
## <http://www.OpenLDAP.org/license.html>.

SLAPTOOLS=slapadd slapcat slapdn slapindex slappasswd slaptest slapauth slapacl slapschema
PROGRAMS=slapd $(SLAPTOOLS)
XPROGRAMS=sslapd libbackends.a .backend liboverlays.a
XSRCS=version.c

SUBDIRS=back-* shell-backends slapi overlays

SRCS	= main.c globals.c bconfig.c config.c daemon.c \
		connection.c search.c filter.c add.c cr.c quorum.c \
		attr.c entry.c backend.c result.c operation.c \
		dn.c compare.c modify.c delete.c modrdn.c ch_malloc.c \
		value.c ava.c bind.c unbind.c abandon.c filterentry.c \
		phonetic.c acl.c str2filter.c aclparse.c init.c user.c \
		lock.c controls.c extended.c passwd.c biglock.c \
		schema.c schema_check.c schema_init.c schema_prep.c \
		schemaparse.c ad.c at.c mr.c syntax.c oc.c saslauthz.c \
		oidm.c starttls.c index.c sets.c referral.c root_dse.c \
		sasl.c module.c mra.c mods.c sl_malloc.c limits.c \
		operational.c matchedValues.c cancel.c syncrepl.c \
		backglue.c backover.c ctxcsn.c ldapsync.c frontend.c \
		slapadd.c slapcat.c slapcommon.c slapdn.c slapindex.c \
		slappasswd.c slaptest.c slapauth.c slapacl.c component.c \
		aci.c alock.c txn.c slapschema.c backtrace.c rurwl.c

OBJS	= main.o globals.o bconfig.o config.o daemon.o \
		connection.o search.o filter.o add.o cr.o quorum.o \
		attr.o entry.o backend.o backends.o result.o operation.o \
		dn.o compare.o modify.o delete.o modrdn.o ch_malloc.o \
		value.o ava.o bind.o unbind.o abandon.o filterentry.o \
		phonetic.o acl.o str2filter.o aclparse.o init.o user.o \
		lock.o controls.o extended.o passwd.o biglock.o \
		schema.o schema_check.o schema_init.o schema_prep.o \
		schemaparse.o ad.o at.o mr.o syntax.o oc.o saslauthz.o \
		oidm.o starttls.o index.o sets.o referral.o root_dse.o \
		sasl.o module.o mra.o mods.o sl_malloc.o limits.o \
		operational.o matchedValues.o cancel.o syncrepl.o \
		backglue.o backover.o ctxcsn.o ldapsync.o frontend.o \
		slapadd.o slapcat.o slapcommon.o slapdn.o slapindex.o \
		slappasswd.o slaptest.o slapauth.o slapacl.o component.o \
		aci.o alock.o txn.o slapschema.o backtrace.o rurwl.o

LDAP_INCDIR= ../../include -I$(srcdir) -I$(srcdir)/slapi -I.
LDAP_LIBDIR= ../../libraries

SLAP_DIR=
SLAPD_STATIC_DEPENDS=@SLAPD_NO_STATIC@ libbackends.a liboverlays.a
SLAPD_STATIC_BACKENDS=@SLAPD_STATIC_BACKENDS@
SLAPD_DYNAMIC_BACKENDS=@SLAPD_DYNAMIC_BACKENDS@

SLAPI_LIBS=@LIBSLAPI@ @SLAPI_LIBS@

XDEFS = $(MODULES_CPPFLAGS)
XLDFLAGS = $(MODULES_LDFLAGS)

XLIBS = $(SLAPD_STATIC_DEPENDS) $(SLAPD_L) $(MODULES_LIBS) $(SLAPI_LIBS)
XXLIBS = $(SLAPD_LIBS) $(SECURITY_LIBS) $(LUTIL_LIBS)
XXXLIBS = $(LTHREAD_LIBS)

BUILD_OPT = "--enable-slapd"
BUILD_SRV = @BUILD_SLAPD@

SLAPD_DEPENDS = $(SLAPD_STATIC_DEPENDS) version.o $(SLAPD_L)
SLAPD_OBJECTS = $(OBJS) version.o

slapi/libreslapi.la: FORCE
	(cd slapi; $(MAKE) $(MFLAGS) all)

slapd: $(SLAPD_DEPENDS) @LIBSLAPI@
	$(LTLINK) -o $@ $(SLAPD_OBJECTS) $(LIBS) \
		$(WRAP_LIBS)
	$(RM) $(SLAPTOOLS)
	for i in $(SLAPTOOLS); do \
		$(LN_S) slapd$(EXEEXT) $$i$(EXEEXT); done


sslapd: version.o
	$(LTLINK) -static -o $@ $(OBJS) version.o $(LIBS) $(WRAP_LIBS)

dummy $(SLAPD_DYNAMIC_BACKENDS): slapd
	cd $@; $(MAKE) $(MFLAGS) all
	@touch $@

dynamic_overlays: slapd
	cd overlays; $(MAKE) $(MFLAGS) dynamic

#
# In Windows, dynamic backends have to be built after slapd. For this
# reason, we only build static backends now and dynamic backends later.
#
.backend: FORCE
	@if test -n "$(SLAPD_STATIC_BACKENDS)"; then \
	    echo "building static backends..."; \
	    for i in XX $(SLAPD_STATIC_BACKENDS); do \
	    	if test $$i != XX; then \
		    echo " "; echo "  cd $$i; $(MAKE) $(MFLAGS) all"; \
		    ( cd $$i; $(MAKE) $(MFLAGS) all ); \
		    if test $$? != 0; then exit 1; fi; \
		fi; \
	    done; \
	    echo " "; \
	fi

libbackends.a: .backend
	@$(RM) -r tmp
	@$(MKDIR) tmp
	@-for i in back-*/*.a; do \
		( \
		  cd tmp; \
		  $(AR) x ../$$i; \
		  pre=`echo $$i | $(SED) -e 's/\/.*$$//' -e 's/back-//'`; \
		  for j in *.o; do \
			mv $$j $${pre}$$j; \
		  done; \
		  $(AR) ruv libbackends.a *.o 2>&1 | grep -v truncated; \
		  $(RM) *.o __.SYMDEF  ________64ELEL_ ; \
		  echo "added backend library $$i"; \
		  echo ""; \
		); \
	done
	@mv -f tmp/libbackends.a ./libbackends.a
	@$(RM) -r tmp
	@if test ! -z "$(RANLIB)" ; then \
		$(RANLIB) libbackends.a; \
	fi
	@ls -l libbackends.a; echo ""

liboverlays.a: FORCE
	cd overlays; $(MAKE) $(MFLAGS) static

version.c: Makefile
	@-$(RM) $@
	$(MKVERSION) -s -n Versionstr slapd > $@

version.o: version.c $(OBJS) $(SLAPD_LIBDEPEND)

backends.o: backends.c $(srcdir)/slap.h

all-local-srv: all-cffiles
	$(MAKE) -C shell-backends $(MFLAGS) all

depend-local-srv: FORCE
	@for i in $(SUBDIRS); do \
		if test -d $$i && test -f $$i/Makefile ; then \
			echo; echo "  cd $$i; $(MAKE) $(MFLAGS) depend"; \
			( cd $$i; $(MAKE) $(MFLAGS) depend ); \
			if test $$? != 0 ; then exit 1; fi ; \
		fi; \
	done
	@echo ""

clean-local:
	$(RM) *.exp *.def *.base *.a *.objs symdummy.c

veryclean-local:
	$(RM) backends.c

clean-local-srv: FORCE
	@for i in $(SUBDIRS); do \
		if test -d $$i && test -f $$i/Makefile ; then \
			echo; echo "  cd $$i; $(MAKE) $(MFLAGS) clean"; \
			( cd $$i; $(MAKE) $(MFLAGS) clean ); \
			if test $$? != 0 ; then exit 1; fi ; \
		fi; \
	done
	$(RM) *.tmp all-cffiles

veryclean-local-srv: FORCE
	@for i in $(SUBDIRS); do \
		if test -d $$i && test -f $$i/Makefile ; then \
			echo; echo "  cd $$i; $(MAKE) $(MFLAGS) clean"; \
			( cd $$i; $(MAKE) $(MFLAGS) veryclean ); \
		fi; \
	done

install-local-srv: install-slapd install-tools \
	install-conf install-schema install-tools
	$(MAKE) -C shell-backends $(MFLAGS) install

install-slapd: FORCE
	-$(MKDIR) $(DESTDIR)$(libexecdir)
	-$(MKDIR) $(DESTDIR)$(localstatedir)/run
	$(LTINSTALL) $(INSTALLFLAGS) $(STRIP) -m 755 \
		slapd$(EXEEXT) $(DESTDIR)$(libexecdir)
	@for i in $(SUBDIRS); do \
	    if test -d $$i && test -f $$i/Makefile ; then \
		echo; echo "  cd $$i; $(MAKE) $(MFLAGS) install"; \
		( cd $$i; $(MAKE) $(MFLAGS) install ); \
		if test $$? != 0 ; then exit 1; fi ; \
	    fi; \
	done

all-cffiles: slapd $(SLAPD_DYNAMIC_BACKENDS) dynamic_overlays
	sysconfdir=$(sysconfdir); \
	localstatedir=$(localstatedir); \
	moduledir=$(moduledir); \
	$(SED) -e "s;%SYSCONFDIR%;$$sysconfdir;" \
		-e "s;%LOCALSTATEDIR%;$$localstatedir;" \
		-e "s;%MODULEDIR%;$$moduledir;" \
		$(srcdir)/slapd.conf > slapd.conf.tmp ; \
	$(SED) -e "s;%SYSCONFDIR%;$$sysconfdir;" \
		-e "s;%LOCALSTATEDIR%;$$localstatedir;" \
		-e "s;%MODULEDIR%;$$moduledir;" \
		$(srcdir)/slapd.ldif > slapd.ldif.tmp ; \
	touch all-cffiles

install-schema: FORCE
	@if test -d $(DESTDIR)$(schemadir) ; then \
		echo "MOVING EXISTING SCHEMA DIR to $(DESTDIR)$(schemadir).$$$$" ; \
		mv $(DESTDIR)$(schemadir) $(DESTDIR)$(schemadir).$$$$ ; \
	fi
	$(MKDIR) $(DESTDIR)$(schemadir)
	@SD=$(DESTDIR)$(schemadir) ; \
	files=`cd $(srcdir)/schema ; echo README *.ldif *.schema` ; \
	for i in $$files ; do \
		echo $(INSTALL) $(INSTALLFLAGS) -m 444 schema/$$i $$SD/$$i ; \
		$(INSTALL) $(INSTALLFLAGS) -m 444 $(srcdir)/schema/$$i $$SD/$$i ; \
	done

install-conf: FORCE
	@-$(MKDIR) $(DESTDIR)$(sysconfdir)
	$(INSTALL) $(INSTALLFLAGS) -m 600 slapd.conf.tmp $(DESTDIR)$(sysconfdir)/slapd.conf.default
	if test ! -f $(DESTDIR)$(sysconfdir)/slapd.conf; then \
		echo "installing slapd.conf in $(sysconfdir)"; \
		echo "$(INSTALL) $(INSTALLFLAGS) -m 600 slapd.conf.tmp $(DESTDIR)$(sysconfdir)/slapd.conf"; \
		$(INSTALL) $(INSTALLFLAGS) -m 600 slapd.conf.tmp $(DESTDIR)$(sysconfdir)/slapd.conf; \
	else \
		echo "PRESERVING EXISTING CONFIGURATION FILE $(DESTDIR)$(sysconfdir)/slapd.conf" ; \
	fi
	$(INSTALL) $(INSTALLFLAGS) -m 600 slapd.ldif.tmp $(DESTDIR)$(sysconfdir)/slapd.ldif.default
	if test ! -f $(DESTDIR)$(sysconfdir)/slapd.ldif; then \
		echo "installing slapd.ldif in $(sysconfdir)"; \
		echo "$(INSTALL) $(INSTALLFLAGS) -m 600 slapd.ldif.tmp $(DESTDIR)$(sysconfdir)/slapd.ldif"; \
		$(INSTALL) $(INSTALLFLAGS) -m 600 slapd.ldif.tmp $(DESTDIR)$(sysconfdir)/slapd.ldif; \
	else \
		echo "PRESERVING EXISTING CONFIGURATION FILE $(DESTDIR)$(sysconfdir)/slapd.ldif" ; \
	fi

install-tools: FORCE
	-$(MKDIR) $(DESTDIR)$(sbindir)
	for i in $(SLAPTOOLS); do \
		$(RM) $(DESTDIR)$(sbindir)/$$i$(EXEEXT); \
		$(LN_S) -f $(DESTDIR)$(libexecdir)/slapd$(EXEEXT) $(DESTDIR)$(sbindir)/$$i$(EXEEXT); \
	done

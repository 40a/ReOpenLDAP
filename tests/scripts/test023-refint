#!/bin/bash
## $ReOpenLDAP$
## Copyright (c) 2015,2016 Leonid Yuriev <leo@yuriev.ru>.
## Copyright (c) 2015,2016 Peter-Service R&D LLC <http://billing.ru/>.
##
## This file is part of ReOpenLDAP.
##
## ReOpenLDAP is free software; you can redistribute it and/or modify it under
## the terms of the GNU Affero General Public License as published by
## the Free Software Foundation; either version 3 of the License, or
## (at your option) any later version.
##
## ReOpenLDAP is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU Affero General Public License for more details.
##
## You should have received a copy of the GNU Affero General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.
##
## ---
##
## Copyright 2004-2014 The OpenLDAP Foundation.
## All rights reserved.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted only as authorized by the OpenLDAP
## Public License.
##
## A copy of this license is available in the file LICENSE in the
## top-level directory of the distribution or, alternatively, at
## <http://www.OpenLDAP.org/license.html>.

echo "running defines.sh"
. ${TOP_SRCDIR}/tests/scripts/defines.sh

if test ${AC_conf[refint]} = no; then
	echo "Referential Integrity overlay not available, test skipped"
	exit 0
fi

mkdir -p $TESTDIR $DBDIR1

echo "Running slapadd to build slapd database..."
config_filter $BACKEND ${AC_conf[monitor]} < $REFINTCONF > $CONF1
$SLAPADD -f $CONF1 -l $LDIFREFINT
RC=$?
if test $RC != 0 ; then
	echo "slapadd failed ($RC)!"
	exit $RC
fi

echo "Starting slapd on TCP/IP port $PORT1..."
$SLAPD -f $CONF1 -h $URI1 $TIMING > $LOG1 2>&1 &
PID=$!
if test $WAIT != 0 ; then
    echo PID $PID
    read foo
fi
KILLPIDS="$PID"
echo "Testing slapd referential integrity operations..."
check_running 1

echo "Searching unmodified database..."

$LDAPSEARCH -S "" -b "o=refint" -h $LOCALHOST -p $PORT1 > $SEARCHOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	killservers
	exit $RC
fi

$EGREP_CMD "(manager|secretary):" $SEARCHOUT | sed "s/george/foster/g" | \
	sort > $TESTOUT 2>&1

echo "Testing modrdn..."
$LDAPMODRDN -D "$REFINTDN" -r -h $LOCALHOST -p $PORT1 -w $PASSWD > \
	/dev/null 2>&1 'uid=george,ou=users,o=refint' 'uid=foster'
#$LDAPMODRDN -D "$REFINTDN" -r -h $LOCALHOST -p $PORT1 -w $PASSWD  \
#	'uid=george,ou=users,o=refint' 'uid=foster'

RC=$?
if test $RC != 0 ; then
	echo "ldapmodrdn failed ($RC)!"
	killservers
	exit $RC
fi

sleep $SLEEP0
echo "Using ldapsearch to check dependents new rdn..."

$LDAPSEARCH -S "" -b "o=refint" -h $LOCALHOST -p $PORT1 > $SEARCHOUT 2>&1

RC=$?
	if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	killservers
	exit $RC
fi

$EGREP_CMD "(manager|secretary):" $SEARCHOUT | sort > $SEARCHFLT 2>&1

echo "Comparing ldapsearch results against original..."
$CMP $TESTOUT $SEARCHFLT > $CMPOUT

if test $? != 0 ; then
	echo "comparison failed - modify operations did not complete correctly"
	killservers
	exit 1
fi

echo "Testing delete..."
$LDAPMODIFY -v -D "$REFINTDN" -h $LOCALHOST -p $PORT1 -w $PASSWD > \
	$TESTOUT 2>&1 << EDEL
version: 1
dn: uid=foster,ou=users,o=refint
changetype: delete
EDEL

RC=$?
if test $RC != 0 ; then
	echo "ldapmodify failed ($RC)!"
	killservers
	exit $RC
fi

sleep $SLEEP0
echo "Using ldapsearch to verify dependents have been deleted..."
$LDAPSEARCH -S "" -b "o=refint" -h $LOCALHOST -p $PORT1 > $SEARCHOUT 2>&1

RC=$?
if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	killservers
	exit $RC
fi

$EGREP_CMD "(manager|secretary):" $SEARCHOUT > $SEARCHFLT 2>&1

RC=`grep -c foster $SEARCHFLT`
if test $RC != 0 ; then
	echo "dependent modify failed - dependents were not deleted"
	killservers
	exit 1
fi

echo "Additional test records..."

$LDAPADD -D "$REFINTDN" -h $LOCALHOST -p $PORT1 -w $PASSWD > \
	$TESTOUT 2>&1 << ETEST
dn: uid=special,ou=users,o=refint
objectClass: inetOrgPerson
objectClass: extensibleObject
uid: special
sn: special
cn: special
businessCategory: nothing
carLicense: FOO
departmentNumber: 933
displayName: special
employeeNumber: 41491
employeeType: vendor
givenName: special
member: uid=alice,ou=users,o=refint
ETEST

RC=$?
if test $RC != 0 ; then
	echo "ldapadd failed ($RC)!"
	killservers
	exit $RC
fi

echo "Testing delete when referential attribute is a MUST..."
$LDAPMODIFY -v -D "$REFINTDN" -h $LOCALHOST -p $PORT1 -w $PASSWD > \
	$TESTOUT 2>&1 << EDEL
version: 1
dn: uid=alice,ou=users,o=refint
changetype: delete
EDEL

RC=$?
if test $RC != 0 ; then
	echo "ldapmodify failed ($RC)!"
	killservers
	exit $RC
fi

if test $BACKEND != "bdb" ; then
	$LDAPMODIFY -v -D "$REFINTDN" -h $LOCALHOST -p $PORT1 -w $PASSWD > \
		$TESTOUT 2>&1 << EDEL
version: 1
dn: cn=group,o=refint
changetype: add
objectClass: groupOfNames
cn: group
member: uid=bill,ou=users,o=refint
member: uid=bob,ou=users,o=refint
member: uid=dave,ou=users,o=refint
member: uid=jorge,ou=users,o=refint
member: uid=theman,ou=users,o=refint
member: uid=richard,ou=users,o=refint
EDEL

	RC=$?
	if test $RC != 0 ; then
		echo "ldapmodify failed ($RC)!"
		killservers
		exit $RC
	fi

	sleep $SLEEP0
	$LDAPSEARCH -S "" -b "o=refint" -h $LOCALHOST -p $PORT1 \
		manager member secretary > $SEARCHOUT 2>&1
	RC=$?
	if test $RC != 0 ; then
		echo "ldapsearch failed ($RC)!"
		killservers
		exit $RC
	fi

	$EGREP_CMD "(manager|member|secretary):" $SEARCHOUT \
		| sed "s/ou=users/ou=people/g" | \
		sort > $TESTOUT 2>&1

	echo "testing subtree rename"
	$LDAPMODRDN -D "$REFINTDN" -r -h $LOCALHOST -p $PORT1 -w $PASSWD > \
		/dev/null 2>&1 'ou=users,o=refint' 'ou=people'
	RC=$?
	if test $RC != 0 ; then
		echo "ldapmodrdn failed ($RC)!"
		killservers
		exit $RC
	fi

	sleep $SLEEP0
	echo "Using ldapsearch to check dependents new rdn..."

	$LDAPSEARCH -S "" -b "o=refint" -h $LOCALHOST -p $PORT1 \
		manager member secretary > $SEARCHOUT 2>&1

	RC=$?
	if test $RC != 0 ; then
		echo "ldapsearch failed ($RC)!"
		killservers
		exit $RC
	fi

	$EGREP_CMD "(manager|member|secretary):" $SEARCHOUT \
		| sort > $SEARCHFLT 2>&1

	echo "Comparing ldapsearch results against original..."
	$CMP $TESTOUT $SEARCHFLT > $CMPOUT

	if test $? != 0 ; then
		echo "comparison failed - subtree rename operations did not complete correctly"
		killservers
		exit 1
	fi
fi

killservers
echo ">>>>> Test succeeded"
exit 0
